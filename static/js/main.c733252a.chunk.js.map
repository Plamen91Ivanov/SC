{"version":3,"sources":["components/AddMovie.module.css","components/Movie.module.css","components/MoviesList.module.css","components/Movie.js","components/MoviesList.js","components/AddMovie.js","App.js","index.js"],"names":["module","exports","Movie","props","className","classes","movie","title","releaseDate","openingText","MovieList","movies","map","release","id","AddMovie","titleRef","useRef","openingTextRef","releaseDateRef","onSubmit","event","preventDefault","current","value","onAddMovie","control","htmlFor","type","ref","rows","App","useState","setMovies","isLoading","setIsLoading","error","setError","fetchMoviesHandler","useCallback","a","fetch","response","ok","Error","json","data","transformedMovies","results","movieData","episode_id","opening_crawl","release_date","message","method","body","JSON","stringify","headers","console","log","useEffect","content","length","MoviesList","Fragment","onClick","ReactDOM","render","document","getElementById"],"mappings":"4EACAA,EAAOC,QAAU,CAAC,QAAU,4B,oBCA5BD,EAAOC,QAAU,CAAC,MAAQ,uB,gBCA1BD,EAAOC,QAAU,CAAC,cAAc,kC,+KCajBC,EAVD,SAACC,GACb,OACE,qBAAIC,UAAWC,IAAQC,MAAvB,UACE,6BAAKH,EAAMI,QACX,6BAAKJ,EAAMK,cACX,4BAAIL,EAAMM,kB,gBCWDC,EAfG,SAACP,GACjB,OACE,oBAAIC,UAAWC,IAAQ,eAAvB,SACGF,EAAMQ,OAAOC,KAAI,SAACN,GAAD,OAChB,cAAC,EAAD,CAEEC,MAAOD,EAAMC,MACbC,YAAaF,EAAMO,QACnBJ,YAAaH,EAAMG,aAHdH,EAAMQ,U,gBCgCNC,MAtCf,SAAkBZ,GAChB,IAAMa,EAAWC,iBAAO,IAClBC,EAAiBD,iBAAO,IACxBE,EAAiBF,iBAAO,IAgB9B,OACE,uBAAMG,SAfR,SAAuBC,GACrBA,EAAMC,iBAIN,IAAMhB,EAAQ,CACZC,MAAOS,EAASO,QAAQC,MACxBf,YAAaS,EAAeK,QAAQC,MACpChB,YAAaW,EAAeI,QAAQC,OAGtCrB,EAAMsB,WAAWnB,IAIjB,UACE,sBAAKF,UAAWC,IAAQqB,QAAxB,UACE,uBAAOC,QAAQ,QAAf,mBACA,uBAAOC,KAAK,OAAOd,GAAG,QAAQe,IAAKb,OAErC,sBAAKZ,UAAWC,IAAQqB,QAAxB,UACE,uBAAOC,QAAQ,eAAf,0BACA,0BAAUG,KAAK,IAAIhB,GAAG,eAAee,IAAKX,OAE5C,sBAAKd,UAAWC,IAAQqB,QAAxB,UACE,uBAAOC,QAAQ,OAAf,0BACA,uBAAOC,KAAK,OAAOd,GAAG,OAAOe,IAAKV,OAEpC,mD,MC4CSY,MA3Ef,WACE,MAA4BC,mBAAS,IAArC,mBAAOrB,EAAP,KAAesB,EAAf,KACA,EAAkCD,oBAAS,GAA3C,mBAAOE,EAAP,KAAkBC,EAAlB,KACA,EAA0BH,mBAAS,MAAnC,mBAAOI,EAAP,KAAcC,EAAd,KAEMC,EAAqBC,sBAAW,sBAAC,gCAAAC,EAAA,6DACrCL,GAAa,GACbE,EAAS,MAF4B,kBAIZI,MAAM,gCAJM,WAI7BC,EAJ6B,QAKrBC,GALqB,sBAM3B,IAAIC,MAAM,yBANiB,wBAShBF,EAASG,OATO,QAS7BC,EAT6B,OAW7BC,EAAoBD,EAAKE,QAAQpC,KAAI,SAACqC,GAC1C,MAAO,CACLnC,GAAImC,EAAUC,WACd3C,MAAO0C,EAAU1C,MACjBE,YAAawC,EAAUE,cACvB3C,YAAayC,EAAUG,iBAG3BnB,EAAUc,GAnByB,kDAqBnCV,EAAS,KAAMgB,SArBoB,QAuBrClB,GAAa,GAvBwB,0DAwBpC,IA7BU,4CAmCb,WAA+B7B,GAA/B,iBAAAkC,EAAA,sEACyBC,MAAM,oFAAoF,CACjHa,OAAQ,OACRC,KAAMC,KAAKC,UAAUnD,GACrBoD,QAAS,CACP,eAAgB,sBALpB,cACQhB,EADR,gBAQmBA,EAASG,OAR5B,OAQMC,EARN,OASAa,QAAQC,IAAId,GATZ,4CAnCa,sBA+Bbe,qBAAU,WACRvB,MACC,CAACA,IAeJ,IAAIwB,EAAU,iDAcd,OAZInD,EAAOoD,OAAS,IAClBD,EAAU,cAACE,EAAD,CAAYrD,OAAQA,KAG5ByB,IACF0B,EAAU,4BAAI1B,KAGZF,IACF4B,EAAU,4CAIV,eAAC,IAAMG,SAAP,WACE,kCACE,cAAC,EAAD,CAAUxC,WAjEH,gDAmET,kCACE,wBAAQyC,QAAS5B,EAAjB,4BAEF,kCAAUwB,QCtEhBK,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.c733252a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"control\":\"AddMovie_control__u3-77\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"movie\":\"Movie_movie__32qKe\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"movies-list\":\"MoviesList_movies-list__1VD5G\"};","import React from 'react';\n\nimport classes from './Movie.module.css';\n\nconst Movie = (props) => {\n  return (\n    <li className={classes.movie}>\n      <h2>{props.title}</h2>\n      <h3>{props.releaseDate}</h3>\n      <p>{props.openingText}</p>\n    </li>\n  );\n};\n\nexport default Movie;\n","import React from 'react';\n\nimport Movie from './Movie';\nimport classes from './MoviesList.module.css';\n\nconst MovieList = (props) => {\n  return (\n    <ul className={classes['movies-list']}>\n      {props.movies.map((movie) => (\n        <Movie\n          key={movie.id}\n          title={movie.title}\n          releaseDate={movie.release}\n          openingText={movie.openingText}\n        />\n      ))}\n    </ul>\n  );\n};\n\nexport default MovieList;\n","import React, { useRef } from 'react';\n\nimport classes from './AddMovie.module.css';\n\nfunction AddMovie(props) {\n  const titleRef = useRef('');\n  const openingTextRef = useRef('');\n  const releaseDateRef = useRef('');\n\n  function submitHandler(event) {\n    event.preventDefault();\n\n    // could add validation here...\n\n    const movie = {\n      title: titleRef.current.value,\n      openingText: openingTextRef.current.value,\n      releaseDate: releaseDateRef.current.value,\n    };\n\n    props.onAddMovie(movie);\n  }\n\n  return (\n    <form onSubmit={submitHandler}>\n      <div className={classes.control}>\n        <label htmlFor='title'>Title</label>\n        <input type='text' id='title' ref={titleRef} />\n      </div>\n      <div className={classes.control}>\n        <label htmlFor='opening-text'>Opening Text</label>\n        <textarea rows='5' id='opening-text' ref={openingTextRef}></textarea>\n      </div>\n      <div className={classes.control}>\n        <label htmlFor='date'>Release Date</label>\n        <input type='text' id='date' ref={releaseDateRef} />\n      </div>\n      <button>Add Movie</button>\n    </form>\n  );\n}\n\nexport default AddMovie;\n","import React, { useState, useEffect, useCallback } from 'react';\n\nimport MoviesList from './components/MoviesList';\nimport AddMovie from './components/AddMovie';\nimport './App.css';\n\nfunction App() {\n  const [movies, setMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  const fetchMoviesHandler = useCallback(async () => {\n    setIsLoading(true);\n    setError(null);\n    try {\n      const response = await fetch('https://swapi.dev/api/films/');\n      if (!response.ok) {\n        throw new Error('Something went wrong!');\n      }\n\n      const data = await response.json();\n\n      const transformedMovies = data.results.map((movieData) => {\n        return {\n          id: movieData.episode_id,\n          title: movieData.title,\n          openingText: movieData.opening_crawl,\n          releaseDate: movieData.release_date,\n        };\n      });\n      setMovies(transformedMovies);\n    } catch (error) {\n      setError(error.message);\n    }\n    setIsLoading(false);\n  }, []);\n\n  useEffect(() => {\n    fetchMoviesHandler();\n  }, [fetchMoviesHandler]);\n\n  async function addMovieHandler(movie) {\n    const response = await fetch('https://network-ec14e-default-rtdb.europe-west1.firebasedatabase.app/network.json',{\n    method: 'POST',\n    body: JSON.stringify(movie),\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  });\n  const data = await response.json();\n  console.log(data);\n\n  }\n\n  let content = <p>Found no movies.</p>;\n\n  if (movies.length > 0) {\n    content = <MoviesList movies={movies} />;\n  }\n\n  if (error) {\n    content = <p>{error}</p>;\n  }\n\n  if (isLoading) {\n    content = <p>Loading...</p>;\n  }\n\n  return (\n    <React.Fragment>\n      <section>\n        <AddMovie onAddMovie={addMovieHandler} />\n      </section>\n      <section>\n        <button onClick={fetchMoviesHandler}>Fetch Movies</button>\n      </section>\n      <section>{content}</section>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}